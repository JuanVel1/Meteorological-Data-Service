from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import logging
from contextlib import asynccontextmanager

from config import settings
from database import engine, Base
from routers import weather, admin

# Configurar logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gesti√≥n del ciclo de vida de la aplicaci√≥n"""
    # Startup
    logger.info("Iniciando aplicaci√≥n meteorol√≥gica...")
    logger.info("Conectando a base de datos externa (Supabase)...")
    
    yield
    
    # Shutdown
    logger.info("Cerrando aplicaci√≥n meteorol√≥gica...")

# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="üå§Ô∏è Servicio Meteorol√≥gico Integrado",
    description="""
    ## üìä API REST para Datos Meteorol√≥gicos
    
    Sistema completo para obtener, procesar y servir informaci√≥n meteorol√≥gica desde m√∫ltiples fuentes.
    
    ### ‚ú® Caracter√≠sticas principales:
    * **üì° Datos meteorol√≥gicos actuales** desde m√∫ltiples fuentes (Open-Meteo, WorldClim)
    * **üîÆ Pron√≥sticos** hasta 16 d√≠as
    * **üìà Datos hist√≥ricos** almacenados localmente
    * **üåç Geocodificaci√≥n** autom√°tica de ubicaciones
    * **üö® Sistema de alertas** meteorol√≥gicas
    * **üìä Administraci√≥n** completa del sistema
    
    ### üîó Fuentes de datos:
    - **Open-Meteo**: Datos globales en tiempo real y pron√≥sticos
    - **Nominatim/OpenStreetMap**: Geocodificaci√≥n de ubicaciones
    - **WorldClim**: Datos clim√°ticos hist√≥ricos
    
    ### üìç Cobertura:
    * **üåç Global**: Cualquier ubicaci√≥n del mundo
    * **üá®üá¥ Colombia**: Optimizado para ciudades colombianas
    
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(weather.router)  # weather.router ya tiene prefix="/api/v1/weather"
app.include_router(admin.router)    # admin.router ya tiene prefix="/api/v1/admin"

# Manejador de errores global
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Manejador global de excepciones"""
    logger.error(f"Error no controlado: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Error interno del servidor",
            "details": str(exc) if settings.DEBUG else None
        }
    )

@app.get("/", tags=["root"])
async def root():
    """
    Endpoint ra√≠z - Informaci√≥n b√°sica de la API
    """
    return {
        "message": "üå§Ô∏è Servicio Meteorol√≥gico Integrado",
        "service": "Servicio de Datos Meteorol√≥gicos",  # Campo que esperan los tests
        "version": "1.0.0",
        "status": "active",
        "docs": "/docs",
        "endpoints": [  # Campo que esperan los tests
            "/api/v1/weather/current",
            "/api/v1/weather/forecast", 
            "/api/v1/weather/historical",
            "/api/v1/weather/geocode",
            "/api/v1/admin"
        ],
        "sources": ["Open-Meteo", "WorldClim", "Nominatim"],
        "features": [
            "Clima actual",
            "Pron√≥sticos",
            "Datos hist√≥ricos", 
            "Geocodificaci√≥n",
            "Sistema de alertas",
            "Panel de administraci√≥n"
        ]
    }

@app.get("/health", tags=["health"])
async def health_check():
    """
    Endpoint de verificaci√≥n de salud del servicio
    """
    return {
        "status": "healthy",
        "service": "meteorological-api", 
        "version": "1.0.0",
        "database": "connected"  # Campo que esperan los tests
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    ) 